
   
function Mascara(objeto, evt, mask) {
 
var LetrasU = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
var LetrasL = 'abcdefghijklmnopqrstuvwxyz';
var Letras  = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';
var Numeros = '0123456789';
var AlfaNum = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';
var Fixos  = '$().-:/ ';
var Charset = " !\"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_/`abcdefghijklmnopqrstuvwxyz{|}~";


evt = (evt) ? evt : (window.event) ? window.event : "";
var value = objeto.value;
if (evt) {
 var ntecla = (evt.which) ? evt.which : evt.keyCode;
 tecla = Charset.substr(ntecla - 32, 1);
 if (ntecla < 32) return true;

 var tamanho = value.length;
 if (tamanho >= mask.length) return false;

 var pos = mask.substr(tamanho,1);
 while (Fixos.indexOf(pos) != -1) {
  value += pos;
  tamanho = value.length;
  if (tamanho >= mask.length) return false;
  pos = mask.substr(tamanho,1);
 }

/*
Utilizando o padrão do MaskFormatter

The following table shows the characters that you can use in the formatting mask:

Character  	Description
# 	Any valid number (Character.isDigit).
U 	Any character (Character.isLetter). All lowercase letters are mapped to uppercase.
L 	Any character (Character.isLetter). All uppercase letters are mapped to lowercase.
A 	Any character or number (Character.isLetter or Character.isDigit).
? 	Any character (Character.isLetter).
* 	Anything.
H 	Any hex character (0-9, a-f or A-F).

*/


 switch (pos) {
   case '#' : if (Numeros.indexOf(tecla) == -1) return false; break;
   case 'U' : if (LetrasU.indexOf(tecla) == -1) return false; break;
   case 'L' : if (LetrasL.indexOf(tecla) == -1) return false; break;
   case '?' : if (Letras.indexOf(tecla) == -1) return false; break;
   case 'A' : if (AlfaNum.indexOf(tecla) == -1 ) return false; break;
   case '*' : objeto.value = value; return true; break;
   default : return false; break;
 }
}
objeto.value = value;
return true;
}
/*
function MaskCEP(objeto, evt) {
	return Mascara(objeto, evt, '##.###-###');
}

function MaskTelefone(objeto, evt) {
	return Mascara(objeto, evt, '(##) ####-####');
}

function MaskCPF(objeto, evt) {
	return Mascara(objeto, evt, '###.###.###-##');
}
*/




