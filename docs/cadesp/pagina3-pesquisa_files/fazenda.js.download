// ============================================================================
//
// Arquivo de código javascript geral da SEFAZ (SP)
//
// ============================================================================

// ============================================================================
// Funções gerais
// ============================================================================
function SairSistema() {
	if (confirm("Deseja realmente sair do sistema Cadesp?")) {
		var posAppName = location.pathname.indexOf("/", 1);
		var appName = location.pathname.substr(0, posAppName);
		if (appName == "/Pages") { appName = "" }
		var pos = window.location.href.indexOf(appName);
		//var pos = window.location.href.toUpperCase().indexOf(appName);
		//var url = window.location.href.substr(0, pos) + appName + "/EncerrarSessao.aspx";
		//Alteração abaixo efetuada para que o sistema procure a localização correta.
		var url = window.location.href.substr(0, pos) + appName + "/EncerrarSessao.aspx";
		window.location = url;
	}
	return false;
}

// Verifica se navegador é Internet Explorer
function isIE() {
	return (navigator.appName.toUpperCase() == "MICROSOFT INTERNET EXPLORER" ? true : false);
}

// ============================================================================
// Funções gerais de formatação
// ============================================================================
function UpperCase(objId) {
	var texto = document.getElementById(objId).value;
	document.getElementById(objId).value = texto.toUpperCase();
}

function Trim(str) {
	return str.replace(/^\s+|\s+$/g, "");
}

function getSelectedText() {
	var txt = '';
	var foundIn = '';
	if (window.getSelection) {
		txt = window.getSelection();
	}
	else if (document.getSelection) {
		txt = document.getSelection();
	}
	else if (document.selection) {
		txt = document.selection.createRange();
	}
	else return;

	return txt;
}

function FormataIE(campo, teclapres) {
	var tecla = teclapres.keyCode;
	var i, j;
	var vr = "";

	campo.focus();

	var txtSelected = getSelectedText();
	if (txtSelected != null && txtSelected.text != "" && txtSelected.text != undefined) {
		return;
	}
	var ch = String.fromCharCode(tecla);
	var posAdded = false;

	if (ch >= '0' && ch <= '9' || (tecla >= 96 && tecla <= 105)) {   //Só números
		var pos = GetCaretPosition(campo);

		// Inserimos um caractere especial '%' marcando a posição de entrada futura do número
		for (i = 0; i < campo.value.length; i++) {
			if (i == pos) {
				vr += "%";
				posAdded = true;
			}
			if (campo.value.charAt(i) >= '0' && campo.value.charAt(i) <= '9')   //Só números
			{
				vr += campo.value.charAt(i);
			}
		}
		// Caso não haja posição de entrada no for passado, é o caso de adicionar ao final
		if (!posAdded)
			vr += "%";

		// Monto o valor novo do campo, inserindo os '.' da IE. Nesse momento, o caractere % representa a
		// "futura" entrada inserida
		campo.value = "";
		for (i = 0; i < vr.length; i++) {
			campo.value = campo.value + vr.charAt(i);

			switch (i) {
				case 2:
				case 5:
				case 8:
					campo.value = campo.value + ".";
					break;
			}
		}
		// Procuro pelo caractere '%'
		var search = true;
		for (i = 0; i < campo.value.length && search; i++) {
			if (campo.value.charAt(i) == '%') {
				search = false;
				pos = i; // A futura posição de entrada da string será a do caractere '%'
			}
		}
		// Removo o caractere %
		campo.value = campo.value.replace('%', '');

		// Defino a futura posição de entrada.
		setCaretTo(campo, pos);
	}
}

function FormataIEDesabilitaCtrl(campo, teclapres) {
	var tecla = teclapres.keyCode;
	var code = (document.all) ? teclapres.keyCode : teclapres.which;
	var message = "Tecla Ctrl desabilitada!";

	// verifica botao Ctrl
	if (parseInt(code) == 17) {
		alert(message);
		window.event.returnValue = false;
	}
	else {
		vr = campo.value;
		vr = vr.replace(".", "").replace(".", "").replace(".", "");
		tam = vr.length + 1;


		if (tecla != 9 && tecla != 8)   //delete, backspace
		{
			if (tam > 2 && tam < 7) {
				campo.value = vr.substr(0, tam - 3) + '.' + vr.substr(tam - 3, tam);
			}
			if (tam >= 7 && tam <= 10) {
				campo.value = vr.substr(0, 3) + '.' + vr.substr(3, 3) + '.' + vr.substr(6, 3);
			}
			if (tam >= 10 && tam <= 12) {
				campo.value = vr.substr(0, 3) + '.' + vr.substr(3, 3) + '.' + vr.substr(6, 3) + '.' + vr.substr(9, 3);
			}
		}
	}
}

function FormataGuid(campo, teclapres) {
    var tecla = teclapres.keyCode;
    var i, j;
    var vr = "";

    campo.focus();

    var txtSelected = getSelectedText();
    if (txtSelected != null && txtSelected.text != "" && txtSelected.text != undefined) {
        return;
    }

    var ch = String.fromCharCode(tecla);
    var posAdded = false;
    var reValidChars = /\d|[a-zA-Z]/;

    if (ch >= '0' && ch <= '9' || (tecla >= 96 && tecla <= 105) || reValidChars.test(ch)) {  //Só números e letras
        var pos = GetCaretPosition(campo);

        // Inserimos um caractere especial '%' marcando a posição de entrada futura do número
        for (i = 0; i < campo.value.length; i++) {
            if (i == pos) {
                vr += "%";
                posAdded = true;
            }
            if ((campo.value.charAt(i) >= '0' && campo.value.charAt(i) <= '9')
				|| (campo.value.charAt(i) >= 'a' && campo.value.charAt(i) <= 'z')
				|| (campo.value.charAt(i) >= 'A' && campo.value.charAt(i) <= 'Z')) {   //Só números e letras
                vr += campo.value.charAt(i);
            }
        }
        // Caso não haja posição de entrada no for passado, é o caso de adicionar ao final
        if (!posAdded)
            vr += "%";

        // Monto o valor novo do campo, inserindo os '-' do GUID. Nesse momento, o caractere % representa a
        // "futura" entrada inserida
        campo.value = "";
        for (i = 0; i < vr.length; i++) {
            campo.value = campo.value + vr.charAt(i);

            // xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx, in which each x is a hexadecimal digit in the range 0-9 or a-f
            switch (i) {
                case 7:
                case 11:
                case 15:
                case 19:
                    campo.value += "-";
                    break;
            }
        }
        // Procuro pelo caractere '%'
        var search = true;
        for (i = 0; i < campo.value.length && search; i++) {
            if (campo.value.charAt(i) == '%') {
                search = false;
                pos = i; // A futura posição de entrada da string será a do caractere '%'
            }
        }
        // Removo o caractere %
        campo.value = campo.value.replace('%', '');

        // Defino a futura posição de entrada.
        setCaretTo(campo, pos);
    }
}

function FormataCNPJ(campo, teclapres) {
	var tecla = teclapres.keyCode;
	var i, j;
	var vr = "";

	campo.focus();

	var txtSelected = getSelectedText();
	if (txtSelected != null && txtSelected.text != "" && txtSelected.text != undefined)	{
		return;
	}

	var ch = String.fromCharCode(tecla);
	var posAdded = false;

	if (ch >= '0' && ch <= '9' || (tecla >= 96 && tecla <= 105)) {  //Só números
		var pos = GetCaretPosition(campo);

		// Inserimos um caractere especial '%' marcando a posição de entrada futura do número
		for (i = 0; i < campo.value.length; i++) {
			if (i == pos) {
				vr += "%";
				posAdded = true;
			}
			if (campo.value.charAt(i) >= '0' && campo.value.charAt(i) <= '9')   //Só números
			{
				vr += campo.value.charAt(i);
			}
		}
		// Caso não haja posição de entrada no for passado, é o caso de adicionar ao final
		if (!posAdded)
			vr += "%";

		// Monto o valor novo do campo, inserindo os '.' da IE. Nesse momento, o caractere % representa a
		// "futura" entrada inserida
		campo.value = "";
		for (i = 0; i < vr.length; i++) {
			campo.value = campo.value + vr.charAt(i);

			// xx.xxx.xxx/xxxx-xx
			switch (i) {
				case 1:
				case 4:
					campo.value += ".";
					break;
				case 7:
					campo.value += "/";
					break;
				case 11:
					campo.value += "-";
					break;
			}
		}
		// Procuro pelo caractere '%'
		var search = true;
		for (i = 0; i < campo.value.length && search; i++) {
			if (campo.value.charAt(i) == '%') {
				search = false;
				pos = i; // A futura posição de entrada da string será a do caractere '%'
			}
		}
		// Removo o caractere %
		campo.value = campo.value.replace('%', '');

		// Defino a futura posição de entrada.
		setCaretTo(campo, pos);
	}
}

function FormataCNPJDesabilitaCtrl(campo, teclapres) {
	var tecla = teclapres.keyCode;
	var code = (document.all) ? teclapres.keyCode : teclapres.which;
	var message = "Tecla Ctrl desabilitada!";

	// verifica botao Ctrl
	if (parseInt(code) == 17) {
		alert(message);
		window.event.returnValue = false;
	}
	else {
		vr = campo.value;
		vr = vr.replace(".", "");
		vr = vr.replace(".", "");
		vr = vr.replace("/", "");
		vr = vr.replace("-", "");
		tam = vr.length + 1;

		if (tecla != 9 && tecla != 8)   //delete, backspace
		{
			if (tam > 2 && tam < 6) {
				campo.value = vr.substr(0, tam - 2) + '.' + vr.substr(tam - 2, tam);
			}

			if (tam >= 6 && tam <= 10) {
				campo.value = vr.substr(0, 2) + '.' + vr.substr(2, 3) + '.' + vr.substr(5, 3);
			}
			if (tam >= 9 && tam <= 13) {
				campo.value = vr.substr(0, 2) + '.' + vr.substr(2, 3) + '.' + vr.substr(5, 3) + '/' + vr.substr(8, 4);
			}
			if (tam >= 13 && tam <= 14) {
				campo.value = vr.substr(0, 2) + '.' + vr.substr(2, 3) + '.' + vr.substr(5, 3) + '/' + vr.substr(8, 4) + '-' + vr.substr(12, 2);
			}
		}
	}
}

function FormataCNPJBase(campo, teclapres) {
	var tecla = teclapres.keyCode;
	var i, j;
	var vr = "";

	campo.focus();

	var txtSelected = getSelectedText();
	if (txtSelected != null && txtSelected.text != "" && txtSelected.text != undefined)	{
		return;
	}
	var ch = String.fromCharCode(tecla);
	var posAdded = false;

	if (ch >= '0' && ch <= '9' || (tecla >= 96 && tecla <= 105)) {  //Só números
		var pos = GetCaretPosition(campo);

		// Inserimos um caractere especial '%' marcando a posição de entrada futura do número
		for (i = 0; i < campo.value.length; i++) {
			if (i == pos) {
				vr += "%";
				posAdded = true;
			}
			if (campo.value.charAt(i) >= '0' && campo.value.charAt(i) <= '9')   //Só números
			{
				vr += campo.value.charAt(i);
			}
		}
		// Caso não haja posição de entrada no for passado, é o caso de adicionar ao final
		if (!posAdded)
			vr += "%";

		// Monto o valor novo do campo, inserindo os '.' da IE. Nesse momento, o caractere % representa a
		// "futura" entrada inserida
		campo.value = "";
		for (i = 0; i < vr.length; i++) {
			campo.value = campo.value + vr.charAt(i);

			// xx.xxx.xxx
			switch (i) {
				case 1:
				case 4:
					campo.value += ".";
					break;
			}
		}
		// Procuro pelo caractere '%'
		var search = true;
		for (i = 0; i < campo.value.length && search; i++) {
			if (campo.value.charAt(i) == '%') {
				search = false;
				pos = i; // A futura posição de entrada da string será a do caractere '%'
			}
		}
		// Removo o caractere %
		campo.value = campo.value.replace('%', '');

		// Defino a futura posição de entrada.
		setCaretTo(campo, pos);
	}

}

function FormataCNPJBaseDesabilitaCtrl(campo, teclapres) {
	var tecla = teclapres.keyCode;
	var code = (document.all) ? teclapres.keyCode : teclapres.which;
	var message = "Tecla Ctrl desabilitada!";

	// verifica botao Ctrl
	if (parseInt(code) == 17) {
		alert(message);
		window.event.returnValue = false;
	}
	else {
		vr = campo.value;
		vr = vr.replace(".", "");
		vr = vr.replace(".", "");
		tam = vr.length + 1;

		if (tecla != 9 && tecla != 8)   //delete, backspace
		{
			if (tam > 2 && tam < 6) {
				campo.value = vr.substr(0, tam - 2) + '.' + vr.substr(tam - 2, tam);
			}

			if (tam >= 6 && tam <= 10) {
				campo.value = vr.substr(0, 2) + '.' + vr.substr(2, 3) + '.' + vr.substr(5, 3);
			}
		}
	}
}

function FormataCPF(campo, teclapres) {
	var tecla = teclapres.keyCode;
	var i, j;
	var vr = "";

	campo.focus();

	var txtSelected = getSelectedText();
	if (txtSelected != null && txtSelected.text != "" && txtSelected.text != undefined)	{
		return;
	}
	var ch = String.fromCharCode(tecla);
	var posAdded = false;

	if (ch >= '0' && ch <= '9' || (tecla >= 96 && tecla <= 105)) {  //Só números
		var pos = GetCaretPosition(campo);

		// Inserimos um caractere especial '%' marcando a posição de entrada futura do número
		for (i = 0; i < campo.value.length; i++) {
			if (i == pos) {
				vr += "%";
				posAdded = true;
			}
			if (campo.value.charAt(i) >= '0' && campo.value.charAt(i) <= '9')   //Só números
			{
				vr += campo.value.charAt(i);
			}
		}
		// Caso não haja posição de entrada no for passado, é o caso de adicionar ao final
		if (!posAdded)
			vr += "%";

		// Monto o valor novo do campo, inserindo os '.' da IE. Nesse momento, o caractere % representa a
		// "futura" entrada inserida
		campo.value = "";
		for (i = 0; i < vr.length; i++) {
			campo.value = campo.value + vr.charAt(i);

			// xxx.xxx.xxx-xx
			switch (i) {
				case 2:
				case 5:
					campo.value += ".";
					break;
				case 8:
					campo.value += "-";
					break;
			}
		}
		// Procuro pelo caractere '%'
		var search = true;
		for (i = 0; i < campo.value.length && search; i++) {
			if (campo.value.charAt(i) == '%') {
				search = false;
				pos = i; // A futura posição de entrada da string será a do caractere '%'
			}
		}
		// Removo o caractere %
		campo.value = campo.value.replace('%', '');

		// Defino a futura posição de entrada.
		setCaretTo(campo, pos);
	}
}

function FormataNIRE(campo, teclapres) {
	var tecla = teclapres.keyCode;
	var i, j;
	var vr = "";

	campo.focus();

	var txtSelected = getSelectedText();
	if (txtSelected != null && txtSelected.text != "" && txtSelected.text != undefined)	{
		return;
	}
	var ch = String.fromCharCode(tecla);
	var posAdded = false;

	if (ch >= '0' && ch <= '9' || (tecla >= 96 && tecla <= 105)) { //Só números
		var pos = GetCaretPosition(campo);

		// Inserimos um caractere especial '%' marcando a posição de entrada futura do número
		for (i = 0; i < campo.value.length; i++) {
			if (i == pos) {
				vr += "%";
				posAdded = true;
			}
			if (campo.value.charAt(i) >= '0' && campo.value.charAt(i) <= '9')   //Só números
			{
				vr += campo.value.charAt(i);
			}
		}
		// Caso não haja posição de entrada no for passado, é o caso de adicionar ao final
		if (!posAdded)
			vr += "%";

		// Monto o valor novo do campo, inserindo os '.' da IE. Nesse momento, o caractere % representa a
		// "futura" entrada inserida
		campo.value = "";
		for (i = 0; i < vr.length; i++) {
			campo.value = campo.value + vr.charAt(i);

			// xx.x.xxxxxxx-x


			switch (i) {
				case 1:
				case 2:
					campo.value += ".";
					break;
				case 9:
					campo.value += "-";
					break;
			}
		}
		// Procuro pelo caractere '%'
		var search = true;
		for (i = 0; i < campo.value.length && search; i++) {
			if (campo.value.charAt(i) == '%') {
				search = false;
				pos = i; // A futura posição de entrada da string será a do caractere '%'
			}
		}
		// Removo o caractere %
		campo.value = campo.value.replace('%', '');

		// Defino a futura posição de entrada.
		setCaretTo(campo, pos);
	}
}

function FormataCPFCNPJ(campo, teclapres) {
	vr = campo.value;
	vr = Substitui(vr, '.', '');
	vr = Substitui(vr, '-', '');
	vr = Substitui(vr, '/', '');
	tam = vr.length;

	if (tam >= 0 && tam <= 11)
		FormataCPF(campo, teclapres);

	if (tam > 11 && tam <= 14)
		FormataCNPJ(campo, teclapres);
}

function FormataCRC(campo, teclapres) {
	var tecla = teclapres.keyCode;
	var i, j;
	var vr = "";

	campo.focus();

	var txtSelected = getSelectedText();
	if (txtSelected != null && txtSelected.text != "" && txtSelected.text != undefined)	{
		return;
	}

	var ch = String.fromCharCode(tecla);
	var posAdded = false;

	if (ch >= '0' && ch <= '9' || (tecla >= 96 && tecla <= 105)) {  //Só números
		var pos = GetCaretPosition(campo);

		// Inserimos um caractere especial '%' marcando a posição de entrada futura do número
		for (i = 0; i < campo.value.length; i++) {
			if (i == pos) {
				vr += "%";
				posAdded = true;
			}
			if ((campo.value.charAt(i) >= '0' && campo.value.charAt(i) <= '9')
				|| (campo.value.charAt(i) >= 'a' && campo.value.charAt(i) <= 'z')
				|| (campo.value.charAt(i) >= 'A' && campo.value.charAt(i) <= 'Z')) {   //Só números e letras
				vr += campo.value.charAt(i);
			}
		}
		// Caso não haja posição de entrada no for passado, é o caso de adicionar ao final
		if (!posAdded)
			vr += "%";

		// Monto o valor novo do campo, inserindo os '.' da IE. Nesse momento, o caractere % representa a
		// "futura" entrada inserida
		campo.value = "";
		for (i = 0; i < vr.length; i++) {
			campo.value = campo.value + vr.charAt(i);

			// xxxxxxxxx/x-x
			switch (i) {
				case 8:
					campo.value += "/";
					break;
				case 9:
					campo.value += "-";
					break;
			}
		}
		// Procuro pelo caractere '%'
		var search = true;
		for (i = 0; i < campo.value.length && search; i++) {
			if (campo.value.charAt(i) == '%') {
				search = false;
				pos = i; // A futura posição de entrada da string será a do caractere '%'
			}
		}
		// Removo o caractere %
		campo.value = campo.value.replace('%', '');

		// Defino a futura posição de entrada.
		setCaretTo(campo, pos);
	}
}

function FormataData(campo, teclapres) {
	var tecla = teclapres.keyCode;
	var i, j;
	var vr = "";

	campo.focus();

	var txtSelected = getSelectedText();
	if (txtSelected != null && txtSelected.text != "" && txtSelected.text != undefined)	{
		return;
	}

	var ch = String.fromCharCode(tecla);
	var posAdded = false;

	if (ch >= '0' && ch <= '9' || (tecla >= 96 && tecla <= 105)) {  //Só números
		var pos = GetCaretPosition(campo);

		// Inserimos um caractere especial '%' marcando a posição de entrada futura do número
		for (i = 0; i < campo.value.length; i++) {
			if (i == pos) {
				vr += "%";
				posAdded = true;
			}
			if (campo.value.charAt(i) >= '0' && campo.value.charAt(i) <= '9')   //Só números
			{
				vr += campo.value.charAt(i);
			}
		}
		// Caso não haja posição de entrada no for passado, é o caso de adicionar ao final
		if (!posAdded)
			vr += "%";

		// Monto o valor novo do campo, inserindo os '.' da IE. Nesse momento, o caractere % representa a
		// "futura" entrada inserida
		campo.value = "";
		for (i = 0; i < vr.length; i++) {
			campo.value = campo.value + vr.charAt(i);

			// xxxxxxxxx/x-x
			switch (i) {
				case 1:
				case 3:
					campo.value += "/";
					break;
			}
		}
		// Procuro pelo caractere '%'
		var search = true;
		for (i = 0; i < campo.value.length && search; i++) {
			if (campo.value.charAt(i) == '%') {
				search = false;
				pos = i; // A futura posição de entrada da string será a do caractere '%'
			}
		}
		// Removo o caractere %
		campo.value = campo.value.replace('%', '');

		// Defino a futura posição de entrada.
		setCaretTo(campo, pos);
	}
}

function FormataMesAno(campo, teclapres) {
	var tecla = teclapres.keyCode;
	var i, j;
	var vr = "";

	campo.focus();

	var txtSelected = getSelectedText();
	if (txtSelected != null && txtSelected.text != "" && txtSelected.text != undefined)	{
		return;
	}

	var ch = String.fromCharCode(tecla);
	var posAdded = false;

	if (ch >= '0' && ch <= '9' || (tecla >= 96 && tecla <= 105)) {  //Só números
		var pos = GetCaretPosition(campo);

		// Inserimos um caractere especial '%' marcando a posição de entrada futura do número
		for (i = 0; i < campo.value.length; i++) {
			if (i == pos) {
				vr += "%";
				posAdded = true;
			}
			if (campo.value.charAt(i) >= '0' && campo.value.charAt(i) <= '9')   //Só números
			{
				vr += campo.value.charAt(i);
			}
		}
		// Caso não haja posição de entrada no for passado, é o caso de adicionar ao final
		if (!posAdded)
			vr += "%";

		// Monto o valor novo do campo, inserindo os '.' da IE. Nesse momento, o caractere % representa a
		// "futura" entrada inserida
		campo.value = "";
		for (i = 0; i < vr.length; i++) {
			campo.value = campo.value + vr.charAt(i);

			// xx/xxxx
			switch (i) {
				case 1:
					campo.value += "/";
					break;
			}
		}
		// Procuro pelo caractere '%'
		var search = true;
		for (i = 0; i < campo.value.length && search; i++) {
			if (campo.value.charAt(i) == '%') {
				search = false;
				pos = i; // A futura posição de entrada da string será a do caractere '%'
			}
		}
		// Removo o caractere %
		campo.value = campo.value.replace('%', '');

		// Defino a futura posição de entrada.
		setCaretTo(campo, pos);
	}

}

function FormataValor(campo, tammax, teclapres) {
	var tecla = teclapres.keyCode;

	vr = campo.value;
	vr = vr.replace("/", "");
	vr = vr.replace("/", "");
	vr = vr.replace(",", "");
	vr = vr.replace(".", "");
	vr = vr.replace(".", "");
	vr = vr.replace(".", "");
	vr = vr.replace(".", "");
	tam = vr.length;

	if (tam < tammax && tecla != 8) { tam = vr.length + 1; }

	if (tecla == 8) { tam = tam - 1; }

	if (tecla == 8 || tecla >= 48 && tecla <= 57 || tecla >= 96 && tecla <= 105) {
		if (tam <= 2) {
			campo.value = vr;
		}

		if ((tam > 2) && (tam <= 5)) {
			campo.value = vr.substr(0, tam - 2) + ',' + vr.substr(tam - 2, tam);
		}

		if ((tam >= 6) && (tam <= 8)) {
			campo.value = vr.substr(0, tam - 5) + '.' + vr.substr(tam - 5, 3) + ',' + vr.substr(tam - 2, tam);
		}

		if ((tam >= 9) && (tam <= 11)) {
			campo.value = vr.substr(0, tam - 8) + '.' + vr.substr(tam - 8, 3) + '.' + vr.substr(tam - 5, 3) + ',' + vr.substr(tam - 2, tam);
		}

		if ((tam >= 12) && (tam <= 14)) {
			campo.value = vr.substr(0, tam - 11) + '.' + vr.substr(tam - 11, 3) + '.' + vr.substr(tam - 8, 3) + '.' + vr.substr(tam - 5, 3) + ',' + vr.substr(tam - 2, tam);
		}

		if ((tam >= 15) && (tam <= 17)) {
			campo.value = vr.substr(0, tam - 14) + '.' + vr.substr(tam - 14, 3) + '.' + vr.substr(tam - 11, 3) + '.' + vr.substr(tam - 8, 3) + '.' + vr.substr(tam - 5, 3) + ',' + vr.substr(tam - 2, tam);
		}
	}
}

function FormataValor(campo, tammax, tamdec, teclapres) {
	var tecla = teclapres.keyCode;
	var i, j;
	var vr = "";

	campo.focus();

	var txtSelected = getSelectedText();
	if (txtSelected != null && txtSelected.text != "" && txtSelected.text != undefined)
	{
		return;
	}

	var ch = String.fromCharCode(tecla);
	var posAdded = false;

	if (ch >= '0' && ch <= '9' || (tecla >= 96 && tecla <= 105))
	{  //Só números
		var pos = GetCaretPosition(campo);

		// Inserimos um caractere especial '%' marcando a posição de entrada futura do número
		for (i = 0; i < campo.value.length; i++)
		{
			if (i == pos)
			{
				vr += "%";
				posAdded = true;
			}
			if (campo.value.charAt(i) >= '0' && campo.value.charAt(i) <= '9')   //Só números
			{
				vr += campo.value.charAt(i);
			}
		}
		// Caso não haja posição de entrada no for passado, é o caso de adicionar ao final
		if (!posAdded)
			vr += "%";

		// Monto o valor novo do campo, inserindo os '.' do valor. Nesse momento, o caractere % representa a
		// "futura" entrada inserida
		campo.value = "";
		var tam = vr.length;
		var carMovidos = 0;

		if (tam == tammax && tecla != 8)
			return;

		for (i = vr.length - 1; i >= 0; i--)
		{
			campo.value = vr.charAt(i) + campo.value;
			carMovidos++;
			// 9.999,99
			if ((campo.value.length == tamdec)
				&& i > 0)
			{
				campo.value = "," + campo.value;
			}
			if ((carMovidos > tamdec)
				&& ((carMovidos - tamdec) % 3 == 0)
				&& i > 0)
			{
				campo.value = "." + campo.value;
			}
		}
		// Procuro pelo caractere '%'
		var search = true;
		for (i = 0; i < campo.value.length && search; i++)
		{
			if (campo.value.charAt(i) == '%')
			{
				search = false;
				pos = i; // A futura posição de entrada da string será a do caractere '%'
			}
		}
		// Removo o caractere %
		campo.value = campo.value.replace('%', '');

		// Defino a futura posição de entrada.
		setCaretTo(campo, pos);
	} 
}

function FormataCEP(campo, teclapres) {
	var tecla = teclapres.keyCode;
	var i, j;
	var vr = "";

	campo.focus();

	var txtSelected = getSelectedText();
	if (txtSelected != null && txtSelected.text != "" && txtSelected.text != undefined)	{
		return;
	}

	var ch = String.fromCharCode(tecla);
	var posAdded = false;

	if (ch >= '0' && ch <= '9' || (tecla >= 96 && tecla <= 105)) {   //Só números
		var pos = GetCaretPosition(campo);

		// Inserimos um caractere especial '%' marcando a posição de entrada futura do número
		for (i = 0; i < campo.value.length; i++) {
			if (i == pos) {
				vr += "%";
				posAdded = true;
			}
			if (campo.value.charAt(i) >= '0' && campo.value.charAt(i) <= '9')   //Só números
			{
				vr += campo.value.charAt(i);
			}
		}
		// Caso não haja posição de entrada no for passado, é o caso de adicionar ao final
		if (!posAdded)
			vr += "%";

		// Monto o valor novo do campo, inserindo os '.' da IE. Nesse momento, o caractere % representa a
		// "futura" entrada inserida
		campo.value = "";
		for (i = 0; i < vr.length; i++) {
			campo.value = campo.value + vr.charAt(i);

			// xx.xxx-xxx
			switch (i) {
				case 1:
					campo.value += ".";
					break;
				case 4:
					campo.value += "-";
					break;

			}
		}
		// Procuro pelo caractere '%'
		var search = true;
		for (i = 0; i < campo.value.length && search; i++) {
			if (campo.value.charAt(i) == '%') {
				search = false;
				pos = i; // A futura posição de entrada da string será a do caractere '%'
			}
		}
		// Removo o caractere %
		campo.value = campo.value.replace('%', '');

		// Defino a futura posição de entrada.
		setCaretTo(campo, pos);
	}
}

function FormataTelefone(campo, teclapres) {
	var tecla = teclapres.keyCode;
	var i, j;
	var vr = "";

	campo.focus();

	var txtSelected = getSelectedText();
	if (txtSelected != null && txtSelected.text != "" && txtSelected.text != undefined)	{
		return;
	}

	var ch = String.fromCharCode(tecla);
	var posAdded = false;

	if ((ch >= '0' && ch <= '9' || (tecla >= 96 && tecla <= 105)) && campo.value.length < 10) {  //Só números
		var pos = GetCaretPosition(campo);

		// Inserimos um caractere especial '%' marcando a posição de entrada futura do número
		for (i = 0; i < campo.value.length; i++) {
			if (i == pos) {
				vr += "%";
				posAdded = true;
			}
			if (campo.value.charAt(i) >= '0' && campo.value.charAt(i) <= '9')   //Só números
			{
				vr += campo.value.charAt(i);
			}
		}
		// Caso não haja posição de entrada no for passado, é o caso de adicionar ao final
		if (!posAdded)
			vr += "%";

		// Monto o valor novo do campo, inserindo os '.' da IE. Nesse momento, o caractere % representa a
		// "futura" entrada inserida
		campo.value = "";
		for (i = 0; i < vr.length; i++) {
			campo.value = campo.value + vr.charAt(i);

			// xxxx-xxxx ou // xxxxx-xxxx
			switch (i) {
			    case (vr.length - 5):
					campo.value += "-";
					break;
			}
		}
		// Procuro pelo caractere '%'
		var search = true;
		for (i = 0; i < campo.value.length && search; i++) {
			if (campo.value.charAt(i) == '%') {
				search = false;
				pos = i; // A futura posição de entrada da string será a do caractere '%'
			}
		}
		// Removo o caractere %
		campo.value = campo.value.replace('%', '');

		// Defino a futura posição de entrada.
		setCaretTo(campo, pos);
	}
}

function CompletaCampoCaractereEsquerda(campo, caractere, tamanho) {
	vr = "";
	for (i = 0; i < tamanho; i++)
		vr = vr.concat(caractere);
	vr = vr.concat(campo.value);
	campo.value = vr.slice(vr.length - tamanho);
}

function DesabilitaBotaoDireito(event) {
	// verifica botao direito do mouse 
	if (event.button == 2)
	{ alert("Botao direito desabilitado!"); }
}

function DesabilitaBotaoCtrl(e) {
	var code = (document.all) ? event.keyCode : e.which;
	var message = "Tecla Ctrl desabilitada!";

	// verifica botao Ctrl
	if (parseInt(code) == 17) {
		alert(message);
		window.event.returnValue = false;
	}
}

function EnterComoTab(e, proximoCampo) {
    var code = (document.all) ? event.keyCode : e.which;
    // verifica botao enter
    if (code == 13) {
        var wow = document.getElementById(proximoCampo);
        //previne de clicar no botão Confirmar
        if (!isIE()) {
            e.preventDefault();
        }
        else {
            e.returnValue = false;
        }
        wow.focus();
    }
}


function EnterComoTabAndDesabilitaBotaoCtrl(e, proximoCampo) {
    DesabilitaBotaoCtrl(e);
    EnterComoTab(e, proximoCampo);
}


// ============================================================================
// Funções gerais de verificação
// ============================================================================
function GetCaretPosition(oField) {

	// Initialize
	var iCaretPos = 0;

	// IE Support
	if (document.selection) {

		// Set focus on the element
		oField.focus();

		// To get cursor position, get empty selection range
		var oSel = document.selection.createRange();

		// Move selection start to 0 position
		oSel.moveStart('character', -oField.value.length);

		// The caret position is selection length
		iCaretPos = oSel.text.length;
	}

	// Firefox support
	else if (oField.selectionStart || oField.selectionStart == '0')
		iCaretPos = oField.selectionStart;

	// Return results
	return (iCaretPos);
}

function SubmitEnter(defaultButton, e) {
	var keycode;
	if (window.event) keycode = window.event.keyCode;
	else if (e) keycode = e.which;
	else return true;

	if (keycode == 13) {
		defaultButton.click();
		e.keyCode = 0;
		return true;
	}
}


function SubmitEnter_SoAceitaNumero(defaultButton, e) {
	var keycode;
	if (window.event) keycode = window.event.keyCode;
	else if (e) keycode = e.which;
	else return true;

	if (keycode == 13) {
		defaultButton.click();
		e.keyCode = 0;
		return true;
	}
	else {
		return SoAceitaNumero(e);
	}
}
function SubmitEnter_SoAceitaNumeroLetraEEspaco(defaultButton, e) {
	var keycode;
	if (window.event) keycode = window.event.keyCode;
	else if (e) keycode = e.which;
	else return true;

	if (keycode == 13) {
		defaultButton.click();
		e.keyCode = 0;
		return true;
	}
	else {
		return SoAceitaNumeroLetraEEspaco(e);
	}
}
function SubmitEnter_SoAceitaNumeroELetra(defaultButton, e) {
	var keycode;
	if (window.event) keycode = window.event.keyCode;
	else if (e) keycode = e.which;
	else return true;

	if (keycode == 13) {
		defaultButton.click();
		e.keyCode = 0;
		return true;
	}
	else {
		return SoAceitaNumeroELetra(e);
	}
}
function SubmitEnter_TestaNumeroDoLogradouro(defaultButton, e) {
	var keycode;
	if (window.event) keycode = window.event.keyCode;
	else if (e) keycode = e.which;
	else return true;

	if (keycode == 13) {
		defaultButton.click();
		e.keyCode = 0;
		return true;
	}
	else {
		return TestaNumeroDoLogradouro(e);
	}
}



function SubmitEnter(defaultButton, e) {
	var keycode;
	if (window.event) keycode = window.event.keyCode;
	else if (e) keycode = e.which;
	else return true;

	if (keycode == 13) {
		defaultButton.click();
		e.keyCode = 0;
		return true;
	}
	else {
		return true;
	}
}
function SoAceitaNumero(objEvent) {
	var iKeyCode, strKey;
	var reValidChars = /\d/;

	if (isIE()) {
		iKeyCode = objEvent.keyCode;
	}
	else {
		iKeyCode = objEvent.which;
	}

	if ((iKeyCode == 8) ||
		(iKeyCode == 0)) { // Trata as teclas delete, backspace e setas
		return true;
	}

	strKey = String.fromCharCode(iKeyCode);
	if (!reValidChars.test(strKey)) {
		return false;
	}
	else {
		return true;
	}
}

function SoAceitaDigito(campo, objEvent) {
	var iKeyCode, strKey;
	var reValidChars = /[0-9.,]/;
	var vr = campo.value;

	if (isIE()) {
		iKeyCode = objEvent.keyCode;
	}
	else {
		iKeyCode = objEvent.which;
	}

	if (iKeyCode == 8 || iKeyCode == 0) { // Trata as teclas delete, backspace e setas
		return true;
	}

	strKey = String.fromCharCode(iKeyCode);
	if (strKey.indexOf(".") != -1)
	{ strKey = "," }
	if (strKey.indexOf(",") != -1 && (vr.indexOf(",") != -1 || vr.indexOf(".") != -1))
	{ return false; }

	if (reValidChars.test(strKey)) {
		return true;
	}
	else {
		return false;
	}
}

function SoAceitaLetra(objEvent) {
	var iKeyCode, strKey;
	var reValidChars = /[a-zA-Z]/;

	if (isIE()) {
		iKeyCode = objEvent.keyCode;
	}
	else {
		iKeyCode = objEvent.which;
	}

	if ((iKeyCode == 8) ||
		(iKeyCode == 0)) { // Trata as teclas delete, backspace e setas
		return true;
	}

	strKey = String.fromCharCode(iKeyCode);
	if (!reValidChars.test(strKey)) {
		return false;
	}
	else {
		return true;
	}
}

function SoAceitaNumeroELetra(objEvent) {
	var iKeyCode, strKey;
	var reValidChars = /\d|[a-zA-Z]/;

	if (isIE()) {
		iKeyCode = objEvent.keyCode;
	}
	else {
		iKeyCode = objEvent.which;
	}

	if ((iKeyCode == 8) ||
		(iKeyCode == 0)) { // Trata as teclas delete, backspace e setas
		return true;
	}

	strKey = String.fromCharCode(iKeyCode);
	if (!reValidChars.test(strKey)) {
	    if (objEvent.preventDefault)		// necessary for addEventListener, works with traditional
	        objEvent.preventDefault();
	    objEvent.returnValue = false; 	// necessary for attachEvent, works with traditional
		return false;
	}
	else {
		return true;
	}
}

function SoAceitaNumeroLetraEEspaco(objEvent) {
	var iKeyCode, strKey;
	var reValidChars = /\d|[a-zA-Z]/;

	if (isIE()) {
		iKeyCode = objEvent.keyCode;
	}
	else {
		iKeyCode = objEvent.which;
	}

	if ((iKeyCode == 8) ||
		(iKeyCode == 0) ||
		(iKeyCode == 32)) { // Trata as teclas delete, backspace, setas e espaço
		return true;
	}

	strKey = String.fromCharCode(iKeyCode);
	if (!reValidChars.test(strKey)) {
		return false;
	}
	else {
		return true;
	}
}

function TestaNumeroDoLogradouro(objEvent) {
	var iKeyCode, strKey;
	var reValidChars = /\d|[a-zA-Z]|\x2D|\x2E|\x2F/;

	if (isIE()) {
		iKeyCode = objEvent.keyCode;
	}
	else {
		iKeyCode = objEvent.which;
	}

	if ((iKeyCode == 8) ||
		(iKeyCode == 0) ||
		(iKeyCode == 32)) { // Trata as teclas delete, backspace, setas, espaço, / e -
		return true;
	}

	strKey = String.fromCharCode(iKeyCode);
	if (!reValidChars.test(strKey)) {
		return false;
	}
	else {
		return true;
	}
}

function NaoAceitaCaracteresReservadosXML(objEvent) {
	//    var iKeyCode, strKey;  
	//    var reInvalidChars = /<|>|&|'|"/ ];
	//    
	//    if (isIE()) 
	//    {
	//        iKeyCode = objEvent.keyCode;
	//    }
	//    else 
	//    {
	//        iKeyCode = objEvent.which;
	//    }

	//    if ((iKeyCode == 8) ||
	//        (iKeyCode == 0)) { // Trata as teclas delete, backspace e setas
	//        return true;
	//    }
	//    
	//    strKey = String.fromCharCode(iKeyCode);
	//    if (reInvalidChars.test(strKey)) 
	//    {
	//        return false;
	//    }
	//    else
	//    {
	//        return true;
	//    }
}

function VerificaData(data)
// Aceita datas no formato dd/mm/aaaa e dd/mm/aa. Dia e mês com uma ou duas posições
// Ano no formato aa são considerados posteriores a 2000.
// Retornos:
// 0 - Data válida
// 1 - Formato inválido
// 2 - Dia inválido
// 3 - Mês inválido
{
	var dia_txt = "";
	var mes_txt = "";
	var ano_txt = "";
	var i = 0;
	var campo = "dia";

	for (i = 0; i <= data.length; i++) {
		if (data.substring(i, i + 1) != "/") {
			if (campo == "dia")
				dia_txt = dia_txt + data.substring(i, i + 1);

			if (campo == "mes")
				mes_txt = mes_txt + data.substring(i, i + 1);

			if (campo == "ano")
				ano_txt = ano_txt + data.substring(i, i + 1);
		}
		else {
			if (campo == "dia")
				campo = "mes";
			else
				if (campo = "mes")
					campo = "ano";
		}
	}

	var dia = parseInt(dia_txt, 10);
	var mes = parseInt(mes_txt, 10);
	var ano = parseInt(ano_txt, 10);

	if (isNaN(dia) || isNaN(mes) || isNaN(ano))
		return 1;

	if (ano < 100) ano = ano + 2000;

	if (mes > 12 || mes < 1)
		return 3;

	if (dia > 31 || dia < 1)
		return 2;

	if ((mes == 4 || mes == 6 || mes == 9 || mes == 11) && (dia > 30))
		return 2;

	if ((ano % 4 != 0 && mes == 2) && (dia > 28))
		return 2;

	if ((ano % 4 == 0 && mes == 2) && (dia > 29))
		return 2;

	return 0;
}

function ConverteStringToDate(dataTxt)
// Aceita datas no formato dd/mm/aaaa e dd/mm/aa. Dia e mês com uma ou duas posições
// Ano no formato aa são considerados posteriores a 2000.
{
	var dia_txt = "";
	var mes_txt = "";
	var ano_txt = "";
	var i = 0;
	var campo = "dia";

	for (i = 0; i < dataTxt.length; i++) {
		if (dataTxt.substring(i, i + 1) != "/") {
			if (campo == "dia")
				dia_txt = dia_txt + dataTxt.substring(i, i + 1);

			if (campo == "mes")
				mes_txt = mes_txt + dataTxt.substring(i, i + 1);

			if (campo == "ano")
				ano_txt = ano_txt + dataTxt.substring(i, i + 1);
		}
		else {
			if (campo == "dia")
				campo = "mes";
			else
				if (campo = "mes")
					campo = "ano";
		}
	}

	var dia = parseInt(dia_txt, 10);
	var mes = parseInt(mes_txt, 10);
	var ano = parseInt(ano_txt, 10);

	if (ano < 100)
		ano = ano + 2000;

	var dataRetorno = new Date();
	dataRetorno.setFullYear(ano, mes - 1, dia);

	return dataRetorno;
}

function ComparaData(dtInicio, dtFim)
// Retornos
// true - dtInicial <= dtFinal
// false - dtinicial > dtfinal, ou uma das datas é inválida.
{
	if ((VerificaData(dtInicio) == 0) && (VerificaData(dtFim) == 0)) {
		var dataInicio = ConverteStringToDate(dtInicio);
		var dataFim = ConverteStringToDate(dtFim);

		if (dataFim < dataInicio)
			return false;
		else
			return true;
	}
	else {
		return false;
	}
}

function ComparaDataAtual(data)
// Retornos
// true - data <= hoje
// false - data > hoje, ou a data é inválida.
{
	if (VerificaData(data) == 0) {
		var dtAux = ConverteStringToDate(data);
		var hoje = new Date();

		if (dtAux > hoje)
			return false;
		else
			return true;
	}
	else {
		return false;
	}
}


function VerificaMesAno(campo) {
	if (campo.value != "") {
		var expReg = /^([0]\d|[1][0-2])\/[1-2][0-9]\d{2}$/;
		var msgErro = 'Data (' + obj.value + ') inválida.';
		if ((campo.value.match(expReg)) && (campo.value != '')) {
			return true;
		}
		else {
			alert(msgErro);
			//campo.value = "";
			campo.focus();
			return false;
		}
	}
}

function DigitoCPFCNPJ(numCNPJ) {
	var numDois = numCNPJ.substring(numCNPJ.length - 2, numCNPJ.length);
	var novoCNPJ = numCNPJ.substring(0, numCNPJ.length - 2);

	switch (numCNPJ.length) {
		case 11:
			numLim = 11;
			break;
		case 14:
			numLim = 9;
			break;
		default: return false;
	}

	var numSoma = 0;
	var Fator = 1;
	for (var i = novoCNPJ.length - 1; i >= 0; i--) {
		Fator = Fator + 1;
		if (Fator > numLim) {
			Fator = 2;
		}
		numSoma = numSoma + (Fator * Number(novoCNPJ.substring(i, i + 1)));
	}

	numSoma = numSoma / 11;
	var numResto = Math.round(11 * (numSoma - Math.floor(numSoma)));
	if (numResto > 1) {
		numResto = 11 - numResto;
	}
	else {
		numResto = 0;
	}

	//-- Primeiro dígito calculado. Fará parte do novo cálculo.
	var numDigito = String(numResto);
	novoCNPJ = novoCNPJ.concat(numResto);
	//--

	numSoma = 0;
	Fator = 1;
	for (var i = novoCNPJ.length - 1; i >= 0; i--) {
		Fator = Fator + 1;
		if (Fator > numLim) {
			Fator = 2;
		}
		numSoma = numSoma + (Fator * Number(novoCNPJ.substring(i, i + 1)));
	}
	numSoma = numSoma / 11;
	numResto = numResto = Math.round(11 * (numSoma - Math.floor(numSoma)));
	if (numResto > 1) {
		numResto = 11 - numResto;
	}
	else {
		numResto = 0;
	}

	//-- Segundo dígito calculado.

	numDigito = numDigito.concat(numResto);
	if (numDigito == numDois) {
		return 0;
	}
	else {
		return 1;
	}
}

function DigitoCPF(numCPF) {
	var numSoma = 0;
	var d1 = 0;
	var d2 = 0;

	numSoma = (10 * Number(numCPF.substr(0, 1))) + (9 * Number(numCPF.substr(1, 1))) + (8 * Number(numCPF.substr(2, 1))) + (7 * Number(numCPF.substr(3, 1))) + (6 * Number(numCPF.substr(4, 1))) + (5 * Number(numCPF.substr(5, 1))) + (4 * Number(numCPF.substr(6, 1))) + (3 * Number(numCPF.substr(7, 1))) + (2 * Number(numCPF.substr(8, 1)));
	d1 = 11 - (numSoma % 11);
	if (d1 >= 10) {
		d1 = 0;
	}
	numSoma = 0;
	numSoma = (11 * Number(numCPF.substr(0, 1))) + (10 * Number(numCPF.substr(1, 1))) + (9 * Number(numCPF.substr(2, 1))) + (8 * Number(numCPF.substr(3, 1))) + (7 * Number(numCPF.substr(4, 1))) + (6 * Number(numCPF.substr(5, 1))) + (5 * Number(numCPF.substr(6, 1))) + (4 * Number(numCPF.substr(7, 1))) + (3 * Number(numCPF.substr(8, 1))) + (2 * d1);
	d2 = 11 - (numSoma % 11);
	if (d2 >= 10) {
		d2 = 0;
	}

	if (d1 == Number(numCPF.substr(9, 1)) && d2 == Number(numCPF.substr(10, 1))) {
		return 0;
	}
	else {
		return 1;
	}
}


function Substitui(CNPJCPF, CharOrg, CharNovo) {
	var temp = CNPJCPF;
	var i = temp.indexOf(CharOrg);
	while (i > -1) {
		temp = temp.replace(CharOrg, CharNovo);
		i = temp.indexOf(CharOrg, i + CharNovo.length + 1);
	}
	return temp;
}

function ValidarEntradaCadastroJucespClient(source, arguments) {
	var valorNIRE = ObterValorNIRE();

	if (valorNIRE != "") {
		return VerificaNIRE(valorNIRE);
	}
	else {
		alert('Erro 9035: Nenhum campo foi preenchido no filtro da consulta.');
		return false;
	}
}

function ValidarEntradaConsultarCertidaoNaoInscritoClient(source, arguments) {
    var numeroCNPJ = ObterValorFiltroNrCnpjConsultarCertidao();
    var numeroCodigoValidador = ObterValorFiltroNrCodigoValidadorConsultarCertidao();
    var tempNrCdValidador = numeroCodigoValidador;
    var temp = numeroCNPJ;

    temp = Substitui(temp, '.', '');
    temp = Substitui(temp, '/', '');
    temp = Substitui(temp, '-', '');
    temp = Substitui(temp, ' ', '');
    tempNrCdValidador = Substitui(tempNrCdValidador, '-', '');

    if ((temp == "") && (tempNrCdValidador == "")) {
        alert('Erro 9004: Nenhum campo foi preenchido no filtro da consulta.');
        return false;
    }

    if (isNaN(temp) == true) {
        alert('Erro 9001: O número do CNPJ do estabelecimento não pode ser preenchido com letras.');
        return false;
    }

    var i;
    for (i = 0; i < numeroCNPJ.length; i++) {
        if (isNaN(numeroCNPJ.charAt(i)) || numeroCNPJ.charAt(i) == ' ') {
            temp = Substitui(temp, numeroCNPJ.charAt(i), '');
        }
    }
    var CNPJ = temp;
    if (CNPJ != "") {
        var comp = CNPJ.length;

        if ((comp == 11) || (comp == 14)) {
            if (Number(CNPJ) == 0) {
                alert('Erro 9002: O número do CNPJ do estabelecimento deve possuir 14 caracteres.');
                return false;
            }

            RetCritDv = DigitoCPFCNPJ(CNPJ);
            if (RetCritDv == "1") {
                alert('Erro 9003: Número do CNPJ do estabelecimento inválido.');
                return false;
            }
        }
        else {
            alert('Erro 9002: O número do CNPJ do estabelecimento deve possuir 14 caracteres.');
            return false;
        }        
    }
    else {
        alert('Erro 9007: O número do CNPJ do estabelecimento não foi preenchido no filtro da consulta.');
        return false;
    }

    if (tempNrCdValidador == "") {
        alert('Erro 9008: O código validador não foi preenchido no filtro da consulta.');
        return false;
    }

    return true;
}

function ValidarEntradaEmitirCertidaoNaoInscritoClient(source, arguments) {
    var numeroCNPJ = ObterValorFiltroNrCnpjEmitirCertidao();
    var temp = numeroCNPJ;

    	temp = Substitui(temp, '.', '');
    	temp = Substitui(temp, '/', '');
    	temp = Substitui(temp, '-', '');
    	temp = Substitui(temp, ' ', '');

    	if (isNaN(temp) == true) {
    	    alert('Erro 9001: O número do CNPJ do estabelecimento não pode ser preenchido com letras.');
    	    return false;
    	}

    var i;
    for (i = 0; i < numeroCNPJ.length; i++) {
        if (isNaN(numeroCNPJ.charAt(i)) || numeroCNPJ.charAt(i) == ' ') {
            temp = Substitui(temp, numeroCNPJ.charAt(i), '');
        }
    }
    var CNPJ = temp;
    if (CNPJ != "") {
        var comp = CNPJ.length;

        if ((comp == 11) || (comp == 14)) {
            if (Number(CNPJ) == 0) {
                alert('Erro 9002: O número do CNPJ do estabelecimento deve possuir 14 caracteres.');
                return false;
            }

            RetCritDv = DigitoCPFCNPJ(CNPJ);
            if (RetCritDv == "1") {
                alert('Erro 9003: Número do CNPJ do estabelecimento inválido.');
                return false;
            }
        }
        else {
            alert('Erro 9002: O número do CNPJ do estabelecimento deve possuir 14 caracteres.');
            return false;
        }
        return true;
    }
    else {
        alert('Erro 9004: Nenhum campo foi preenchido no filtro da consulta.');
        return false;
    }
}

function ValidarEntradaConsultaPublicaClient(source, arguments) {
	var tipoFiltro = ObterTipoFiltro();
	var valorFiltro = ObterValorFiltro();

	if (tipoFiltro == 0) {
	    return VerificaIE_PrimeiroDV(valorFiltro);
	}
	else {
		if (tipoFiltro == 1) {
			return VerificaCNPJ(valorFiltro);
		}
		else {
			if (tipoFiltro == 2) {
				return VerificaNIRE(valorFiltro);
			}
			else {
				alert('Nenhum campo foi preenchido no filtro da consulta.');
				return false;
			}
		}
	}
	return true;
}

function ValidarEntradaConsultaCassacaoClient(source, arguments) {
	var tipoFiltro = ObterTipoFiltro();
	var valorFiltro = ObterValorFiltro();
	var dtDoeSuspensao = ObterDtDoeSuspensao();
	var dtDoeInaptidao = ObterDtDoeInaptidao();

	if (dtDoeSuspensao == 'Selecione' && dtDoeInaptidao == 'Selecione') {
		alert('Deve ser selecionada a data do DOE em que foi publicada a suspensão ou a cassação');
		return false;
	}	

	if (tipoFiltro == 0) {
		return VerificaIE(valorFiltro);
	}
	else {
		if (tipoFiltro == 1) {
			return VerificaCNPJ(valorFiltro);
		}
		else {
			alert('Nenhum campo foi preenchido no filtro da consulta.');
			return false;
		}
	}

	return true;
}

function VerificaIE(numeroIE) {
	var ie = numeroIE;
	var i;
	for (i = 0; i < ie.length; i++) {
		if (ie.substr(i, 1) == '.' || ie.substr(i, 1) == ' ' || ie.substr(i, 1) == '-' || ie.substr(i, 1) == '/')
			ie = ie.replace(ie.substr(i, 1), "");
	}

	if (ie != "") {
		var expReg = /^(\d{12})|((\d{3}.){3}\d{3})$/;

		if (ie.length == 9) {
			return true;
		}
		if (isNaN(ie) == true) {
			alert('Erro 9002: O número da IE do estabelecimento não pode ser preenchido com letras.');
			return false;
		}
		if (!expReg.exec(ie)) {
			alert('Erro 9010: O número da IE do estabelecimento deve possuir 9 ou 12 caracteres.');
			return false;
		}
		if (Number(ie) == 0) {
			alert('Erro 9010: O número da IE do estabelecimento deve possuir 9 ou 12 caracteres.');
			return false;
		}

		soma = 0;
		pesos1 = new Array(1, 3, 4, 5, 6, 7, 8, 10);
		pesos2 = new Array(3, 2, 10, 9, 8, 7, 6, 5, 4, 3, 2);
		for (i = 0; i < pesos1.length; i++) {
			digito = parseInt(ie.substring(i, i + 1), 10);
			soma += digito * pesos1[i];
		}
		digVerif = (soma % 11) % 10;
		digito = parseInt(ie.substring(8, 9), 10);
		if (digVerif != digito) {
			alert('Erro 9021: Número da IE do estabelecimento inválido.');
			return false;
		}

		soma = 0;
		for (i = 0; i < pesos2.length; i++) {
			digito = parseInt(ie.substring(i, i + 1), 10);
			soma += digito * pesos2[i];
		}
		digVerif = (soma % 11) % 10;
		digito = parseInt(ie.substring(11, 12), 10);

		if (digVerif != digito) {
			alert('Erro 9021: Número da IE do estabelecimento inválido.');
			return false;
		}
		return true;
	}
	else {
		alert('Nenhum campo foi preenchido no filtro da consulta.');
		return false;
	}
}

function VerificaIE_PrimeiroDV(numeroIE) {
	var ie = numeroIE;
	var i;
	for (i = 0; i < ie.length; i++) {
		if (ie.substr(i, 1) == ' ' || ie.substr(i, 1) == '.' || ie.substr(i, 1) == '-' || ie.substr(i, 1) == '/')
			ie = ie.replace(ie.substr(i, 1), "");
	}

	if (ie != "") {
		var expReg = /^(\d{12})|((\d{3}.){3}\d{3})$/;

		if (ie.length != 9) {
			if (isNaN(ie) == true) {
				alert('Erro 9002: O número da IE do estabelecimento não pode ser preenchido com letras.' + ie);
				return false;
			}
			if (!expReg.exec(ie)) {
				alert('Erro 9010: O número da IE do estabelecimento deve possuir 9 ou 12 caracteres.');
				return false;
			}
			if (Number(ie) == 0) {
				alert('Erro 9010: O número da IE do estabelecimento deve possuir 9 ou 12 caracteres.');
				return false;
			}
		}

		soma = 0;
		pesos1 = new Array(1, 3, 4, 5, 6, 7, 8, 10);
		pesos2 = new Array(3, 2, 10, 9, 8, 7, 6, 5, 4, 3, 2);
		for (i = 0; i < pesos1.length; i++) {
			digito = parseInt(ie.substring(i, i + 1), 10);
			soma += digito * pesos1[i];
		}
		digVerif = (soma % 11) % 10;
		digito = parseInt(ie.substring(8, 9), 10);
		if (digVerif != digito) {
			alert('Erro 9021: Número da IE do estabelecimento inválido.');
			return false;
		}

		//soma = 0;
		//for (i = 0; i < pesos2.length; i++) {
		//	digito = parseInt(ie.substring(i, i + 1), 10);
		//	soma += digito * pesos2[i];
		//}
		//digVerif = (soma % 11) % 10;
		//digito = parseInt(ie.substring(11, 12), 10);

		//if (digVerif != digito) {
		//	alert('Erro 9021: Número da IE do estabelecimento inválido.');
		//	return false;
		//}
		return true;
	}
	else {
		alert('Nenhum campo foi preenchido no filtro da consulta.');
		return false;
	}
}

function VerificaCPF(numeroCPF, donoCPF) {
	var temp = numeroCPF;
	var i;
	for (i = 0; i < numeroCPF.length; i++) {
		if (isNaN(numeroCPF.charAt(i)) || numeroCPF.charAt(i) == ' ') {
			temp = Substitui(temp, numeroCPF.charAt(i), '');
		}
	}
	//	temp = Substitui(temp, '.', '');
	//	temp = Substitui(temp, '.', '');
	//	temp = Substitui(temp, '-', '');
	//	temp = Substitui(temp, ' ', '');
	var CPF = temp;
	var codigoErro = null;
	if (CPF != "") {
		var comp = CPF.length;

		if (isNaN(CPF) == true) {
			if (donoCPF == "contabilista")
				codigoErro = "9007";
			else
				if (donoCPF == "participante/ representante")
			        codigoErro = "9008";
			    else
			        if (donoCPF == "procurador")
			            codigoErro = "9036";//Alterar código
			alert('Erro ' + codigoErro + ': O número do CPF do ' + donoCPF + ' não pode ser preenchido com letras.');
			return false;
		}

		if (comp == 11) {
			if (Number(CPF) == 0) {
				if (donoCPF == "contabilista")
					codigoErro = "9017";
				else
					if (donoCPF == "participante/ representante")
				        codigoErro = "9018";
				    else
				        if (donoCPF == "procurador")
				            codigoErro = "9037"; //Alterar código
				alert('Erro ' + codigoErro + ': O número do CPF do ' + donoCPF + ' deve possuir 11 caracteres.');
				return false;
			}

			RetCritDv = DigitoCPF(CPF);
			if (RetCritDv == "1") {
				if (donoCPF == "contabilista")
					codigoErro = "9024";
				else
					if (donoCPF == "participante/ representante")
				        codigoErro = "9026";
				    else
				        if (donoCPF == "procurador")
				            codigoErro = "9038"; //Alterar código
				alert('Erro ' + codigoErro + ': Número do CPF do ' + donoCPF + ' inválido.');
				return false;
			}
		}
		else {
			if (donoCPF == "contabilista")
				codigoErro = "9017";
			else
				if (donoCPF == "participante/ representante")
			        codigoErro = "9018";
			    else
			        if (donoCPF == "procurador")
			            codigoErro = "9037"; //Alterar código
			alert('Erro ' + codigoErro + ': O número do CPF do ' + donoCPF + ' deve possuir 11 caracteres.');
			return false;
		}
		return true;
	}
	else {
		if (donoCPF == "contabilista")
			codigoErro = "9017";
		else
			if (donoCPF == "participante/ representante")
		        codigoErro = "9018";
		    else
		        if (donoCPF == "procurador")
		            codigoErro = "9037"; //Alterar código
		alert('Erro ' + codigoErro + ': O número do CPF do ' + donoCPF + ' deve possuir 11 caracteres.');
		return false;
	}
}

function VerificaCNPJ(numeroCNPJ) {
	var temp = numeroCNPJ;
	var i;
	for (i = 0; i < numeroCNPJ.length; i++) {
		if (isNaN(numeroCNPJ.charAt(i)) || numeroCNPJ.charAt(i) == ' ') {
			temp = Substitui(temp, numeroCNPJ.charAt(i), '');
		}
	}
	//	temp = Substitui(temp, '.', '');
	//	temp = Substitui(temp, '.', '');
	//	temp = Substitui(temp, '/', '');
	//	temp = Substitui(temp, '-', '');
	//	temp = Substitui(temp, ' ', '');
	var CNPJ = temp;
	if (CNPJ != "") {
		var comp = CNPJ.length;

		if (isNaN(CNPJ) == true) {
			alert('Erro 9004: O número do CNPJ do estabelecimento não pode ser preenchido com letras.');
			return false;
		}

		if ((comp == 11) || (comp == 14)) {
			if (Number(CNPJ) == 0) {
				alert('Erro 9012: O número do CNPJ do estabelecimento deve possuir 14 caracteres.');
				return false;
			}

			RetCritDv = DigitoCPFCNPJ(CNPJ);
			if (RetCritDv == "1") {
				alert('Erro 9022: Número do CNPJ do estabelecimento inválido.');
				return false;
			}
		}
		else {
			alert('Erro 9012: O número do CNPJ do estabelecimento deve possuir 14 caracteres.');
			return false;
		}
		return true;
	}
	else {
		alert('Nenhum campo foi preenchido no filtro da consulta.');
		return false;
	}
}

function VerificaCNPJPessoa(numeroCNPJ, donoCNPJ) {
	var temp = numeroCNPJ;
	temp = Substitui(temp, '.', '');
	temp = Substitui(temp, '.', '');
	temp = Substitui(temp, '/', '');
	temp = Substitui(temp, '-', '');
	temp = Substitui(temp, ' ', '');
	var CNPJ = temp;
	var codigoErro;
	if (CNPJ != "") {
		var comp = CNPJ.length;

		if (isNaN(CNPJ) == true) {
			if (donoCNPJ == "estabelecimento")
				codigoErro = "9004";
			else
				if (donoCNPJ == "participante")
			        codigoErro = "9009";
			    else
			        if (donoCNPJ == "procurador")
			            codigoErro = "9039";
			alert('Erro ' + codigoErro + ': O número do CNPJ do ' + donoCNPJ + ' não pode ser preenchido com letras.');
			return false;
		}

		if ((comp == 11) || (comp == 14)) {
			if (Number(CNPJ) == 0) {
				if (donoCNPJ == "estabelecimento")
					codigoErro = "9012";
				else
					if (donoCNPJ == "participante")
				        codigoErro = "9019";
				    else
				        if (donoCNPJ == "procurador")
				            codigoErro = "9040";
				alert('Erro ' + codigoErro + ': O número do CNPJ do ' + donoCNPJ + ' deve possuir 14 caracteres.');
				return false;
			}

			RetCritDv = DigitoCPFCNPJ(CNPJ);
			if (RetCritDv == "1") {
				if (donoCNPJ == "estabelecimento")
					codigoErro = "9022";
				else
					if (donoCNPJ == "participante")
				        codigoErro = "9027";
				    else
				        if (donoCNPJ == "procurador")
				            codigoErro = "9041";
				alert('Erro ' + codigoErro + ': Número do CNPJ do ' + donoCNPJ + ' inválido.');
				return false;
			}
		}
		else {
			if (donoCNPJ == "estabelecimento")
				codigoErro = "9012";
			else
				if (donoCNPJ == "participante")
			        codigoErro = "9019";
			    else
			        if (donoCNPJ == "procurador")
			            codigoErro = "9040";
			alert('Erro ' + codigoErro + ': O número do CNPJ do ' + donoCNPJ + ' deve possuir 14 caracteres.');
			return false;
		}
		return true;
	}
	else {
		if (donoCNPJ == "estabelecimento")
			codigoErro = "9012";
		else
			if (donoCNPJ == "participante")
		        codigoErro = "9019";
		    else
		        if (donoCNPJ == "procurador")
		            codigoErro = "9040";
		alert('Erro ' + codigoErro + ': O número do CNPJ do ' + donoCNPJ + ' deve possuir 14 caracteres.');
		return false;
	}
}

function VerificaCNPJBase(numeroCNPJBase) {
	var temp = numeroCNPJBase;
	temp = Substitui(temp, '.', '');
	temp = Substitui(temp, '.', '');
	temp = Substitui(temp, ' ', '');
	var CNPJBase = temp;
	if (CNPJBase != "") {
		var expReg = /^(\d{8})|(\d{2}.\d{3}.\d{3})$/;

		if (isNaN(CNPJBase) == true) {
			alert('Erro 9003: O número do CNPJ Base do estabelecimento não pode ser preenchido com letras.');
			return false;
		}
		if (!expReg.exec(CNPJBase)) {
			alert('Erro 9011: O número do CNPJ Base do estabelecimento deve possuir 8 caracteres.');
			return false;
		}
		if (Number(CNPJBase) == 0) {
			alert('Erro 9011: O número do CNPJ Base do estabelecimento deve possuir 8 caracteres.');
			return false;
		}
		return true;
	}
	else {
		alert('Erro 9011: O número do CNPJ Base do estabelecimento deve possuir 8 caracteres.');
		return false;
	}
}

function VerificaCEP(numeroCEP) {
	var temp = numeroCEP;
	temp = Substitui(temp, '.', '');
	temp = Substitui(temp, '-', '');
	var cep = temp;
	if (cep != "") {
		var expReg = /^(\d{8})|(\d{2}.\d{3}-\d{3})$/;

		if (isNaN(cep) == true) {
			alert('Erro 9006: O número do CEP do estabelecimento não pode ser preenchido com letras.');
			return false;
		}
		if (!expReg.exec(cep)) {
			alert('Erro 9014: O número do CEP do estabelecimento deve possuir 8 caracteres.');
			return false;
		}
		if (Number(cep) == 0) {
			alert('Erro 9014: O número do CEP do estabelecimento deve possuir 8 caracteres.');
			return false;
		}
		return true;
	}
	else {
		alert('Erro 9014: O número do CEP do estabelecimento deve possuir 8 caracteres.');
		return false;
	}
}

function VerificaNIRE(numeroNIRE) {
	var temp = numeroNIRE;
	temp = Substitui(temp, '.', '');
	temp = Substitui(temp, '.', '');
	temp = Substitui(temp, '-', '');
	temp = Substitui(temp, ' ', '');

	var nire = temp;
	if (nire != "") {
		var expReg = /^(\d{11})|(\d{2}.\d.\d{7}-\d)$/;

		if (isNaN(nire) == true) {
			alert('Erro 9005: O número do NIRE do estabelecimento não pode ser preenchido com letras.');
			return false;
		}
		if (!expReg.exec(nire)) {
			alert('Erro 9013: O número do NIRE do estabelecimento deve possuir 11 caracteres.');
			return false;
		}

		if (Number(nire) == 0) {
			alert('Erro 9013: O número do NIRE do estabelecimento deve possuir 11 caracteres.');
			return false;
		}

		soma = 0;
		pesos = new Array(2, 10, 9, 8, 7, 6, 5, 4, 3, 2);

		for (i = 0; i < pesos.length; i++) {
			digito = parseInt(nire.substring(i, i + 1), 10);
			soma += digito * pesos[i];
		}
		digVerif = (soma * 10) % 11;

		if (digVerif == 0)
			digVerif = 1;

		if (digVerif == 10)
			digVerif = 0;

		digito = parseInt(nire.substring(10, 11), 10);
		if (digVerif != digito) {
			alert('Erro 9023: Número do NIRE do estabelecimento inválido.');
			return false;
		}
		return true;
	}
	else {
		alert('Nenhum campo foi preenchido no filtro da consulta.');
		return false;
	}
}

function VerificaCRC(numeroCRC) {
	var temp = numeroCRC;

	temp = Substitui(temp, '/', '');
	temp = Substitui(temp, '-', '');

	var crc = temp;

	if (crc.length < 9 || crc.length > 11) {
		alert('Erro 9016: O número do CRC do contabilista deve ter o tamanho de 9 a 11 caracteres.');
		return false;
	}

	return true;

	/*if (crc != "") {
	var expReg = /^(\w{11})|(\d[A-Z]{2}\d{6}\/[OP]-\d)$/;
	if (!expReg.exec(crc)) {
	alert('Erro 9025: Número do CRC do Contabilista inválido.');
	return false;
	}

	var temp1 = crc.substr(1, 2).toUpperCase();
	var temp2 = crc.substr(9, 1).toUpperCase();

	switch (temp1) {
	case 'AC':
	crc = crc.replace('A', '2').replace('C', '7');
	break;
	case 'AL':
	crc = crc.replace('A', '0').replace('L', '9');
	break;
	case 'AM':
	crc = crc.replace('A', '0').replace('M', '1');
	break;
	case 'AP':
	crc = crc.replace('A', '2').replace('P', '9');
	break;
	case 'BA':
	crc = crc.replace('B', '1').replace('A', '1');
	break;
	case 'CE':
	crc = crc.replace('C', '0').replace('E', '5');
	break;
	case 'DF':
	crc = crc.replace('D', '2').replace('F', '1');
	break;
	case 'ES':
	crc = crc.replace('E', '1').replace('S', '2');
	break;
	case 'GB':
	crc = crc.replace('G', '2').replace('B', '2');
	break;
	case 'GO':
	crc = crc.replace('G', '2').replace('O', '0');
	break;
	case 'MA':
	crc = crc.replace('M', '0').replace('A', '3');
	break;
	case 'MG':
	crc = crc.replace('M', '1').replace('G', '8');
	break;
	case 'MS':
	crc = crc.replace('M', '2').replace('S', '3');
	break;
	case 'MT':
	crc = crc.replace('M', '1').replace('T', '9');
	break;
	case 'PA':
	crc = crc.replace('P', '0').replace('A', '2');
	break;
	case 'PB':
	crc = crc.replace('P', '0').replace('B', '7');
	break;
	case 'PE':
	crc = crc.replace('P', '0').replace('E', '8');
	break;
	case 'PI':
	crc = crc.replace('P', '0').replace('I', '4');
	break;
	case 'PR':
	crc = crc.replace('P', '1').replace('R', '5');
	break;
	case 'RJ':
	crc = crc.replace('R', '1').replace('J', '3');
	break;
	case 'RN':
	crc = crc.replace('R', '0').replace('N', '6');
	break;
	case 'RO':
	crc = crc.replace('R', '2').replace('O', '6');
	break;
	case 'RR':
	crc = crc.replace('R', '2').replace('R', '5');
	break;
	case 'RS':
	crc = crc.replace('R', '1').replace('S', '7');
	break;
	case 'SC':
	crc = crc.replace('S', '1').replace('C', '6');
	break;
	case 'SE':
	crc = crc.replace('S', '1').replace('E', '0');
	break;
	case 'SP':
	crc = crc.replace('S', '1').replace('P', '4');
	break;
	case 'TO':
	crc = crc.replace('T', '2').replace('O', '4');
	break;
	default:
	alert('Erro 9025: Número do CRC do Contabilista inválido.');
	return false;
	}

	switch (temp2) {
	case 'O':
	crc = crc.replace('O', '1');
	break;
	case 'P':
	crc = crc.replace('P', '4');
	break;
	default:
	alert('Erro 9025: Número do CRC do Contabilista inválido.');
	return false;
	}

	soma = 0;
	pesos = new Array(3, 10, 9, 8, 7, 6, 5, 4, 3, 2);

	for (i = 0; i < pesos.length; i++) {
	digito = parseInt(crc.substring(i, i + 1), 10);
	soma += digito * pesos[i];
	}
	resto = soma % 11;

	if (resto < 2)
	digVerif = 0;
	else
	digVerif = 11 - resto;

	digito = parseInt(crc.substring(10, 11), 10);
	//        if (digVerif != digito)
	//        {
	//        	alert('Erro 9025: Número do CRC do Contabilista inválido.');
	//            return false;
	//        }
	return true;
	}
	else {
	alert('Erro 9025: Número do CRC do Contabilista inválido.');
	return false;
	}*/
}

function ValidarEntradaConsultaCompletaEstabelecimentoClient(source, arguments) {
	var tipoFiltroIdentificacao = ObterTipoFiltroIdentificacao();
	var valorFiltroIdentificacao = ObterValorFiltroIdentificacao();
	var valorFiltroNomeEmpresarial = ObterValorFiltroNomeEmpresarial();
	var tipoFiltroContabilista = ObterTipoFiltroContabilista();
	var valorFiltroContabilista = ObterValorFiltroContabilista();
	var tipoFiltroParticipante = ObterTipoFiltroParticipante();
	var valorFiltroParticipante = ObterValorFiltroParticipante();
	var valorFiltroDelegacia = ObterValorFiltroDelegacia();
	var valorFiltroTipoEstabelecimento = ObterValorFiltroTipoEstabelecimento();
	var valorFiltroSituacaoCadastral = ObterValorFiltroSituacaoCadastral();
	var valorFiltroCnaePrimario = ObterValorFiltroCnaePrimario();
	var valorFiltroCnaeSecundario = ObterValorFiltroCnaeSecundario();
	var tipoFiltroProcurador = ObterTipoFiltroProcurador();
	var valorFiltroProcurador = ObterValorFiltroProcurador();

	if (valorFiltroIdentificacao != "") {
		switch (tipoFiltroIdentificacao) {
			case '0':
				return VerificaIE_PrimeiroDV(valorFiltroIdentificacao);
				break;
			case '1':
				return VerificaCNPJBase(valorFiltroIdentificacao);
				break;
			case '2':
				return VerificaCNPJ(valorFiltroIdentificacao);
				break;
			case '3':
				return VerificaNIRE(valorFiltroIdentificacao);
				break;
			default:
				return false;
		}
	}

	if (valorFiltroNomeEmpresarial != "") {
		var temp = Trim(valorFiltroNomeEmpresarial);
		var compNomeEmpresarial = temp.length;

		if (compNomeEmpresarial < 3) {
			alert('Erro 9015: O Nome Empresarial deve conter pelo menos 3 caracteres.');
			return false;
		}
	}

	if (valorFiltroContabilista != "") {
		switch (tipoFiltroContabilista) {
			case '0':
				return VerificaCRC(valorFiltroContabilista);
				break;
			case '1':
				return VerificaCPF(valorFiltroContabilista, 'contabilista');
				break;
            case '2':
                return VerificaCNPJPessoa(valorFiltroContabilista, 'contabilista');
                break;
			default:
				return false;
		}
	}

	if (valorFiltroParticipante != "") {
		switch (tipoFiltroParticipante) {
			case '0':
				return VerificaCPF(valorFiltroParticipante, 'participante/ representante');
				break;
			case '1':
				return VerificaCNPJPessoa(valorFiltroParticipante, 'participante');
				break;
			default:
				return false;
		}
    }

     if (valorFiltroProcurador != "") {
         switch (tipoFiltroProcurador) {
            case '0':
                return VerificaCPF(valorFiltroProcurador, 'procurador');
                break;
            case '1':
                return VerificaCNPJPessoa(valorFiltroProcurador, 'procurador');
                break;
            default:
                return false;
        }
    }

	if (valorFiltroDelegacia != "0") {
		if (valorFiltroIdentificacao == ""
			&& valorFiltroNomeEmpresarial == ""
			&& valorFiltroContabilista == ""
			&& valorFiltroParticipante == ""
			&& valorFiltroCnaePrimario == "0" 
			&& valorFiltroCnaeSecundario == "0") {
			alert('Erro 9028: Delegacia/Posto Fiscal deve ser acompanhado do preenchimento de outro campo do filtro, adicionalmente a Tipo de Estabelecimento e Situação Cadastral.');
			return false;
		}
	}

	if (valorFiltroCnaePrimario != "0") {
		if (valorFiltroIdentificacao == ""
			&& valorFiltroNomeEmpresarial == ""
			&& valorFiltroContabilista == ""
			&& valorFiltroParticipante == ""
			&& valorFiltroDelegacia == "0"
            && valorFiltroProcurador == "") {
			alert('Erro 9029: Algum campo do filtro da consulta deve ser preenchido, além do Tipo de Estabelecimento, Situação Cadastral, CNAE Principal e CNAE Secundário.');
			return false;
		}
	}

	if (valorFiltroCnaeSecundario != "0") {
		if (valorFiltroIdentificacao == ""
			&& valorFiltroNomeEmpresarial == ""
			&& valorFiltroContabilista == ""
			&& valorFiltroParticipante == ""
			&& valorFiltroDelegacia == "0"
            && valorFiltroProcurador == "") {
			alert('Erro 9029: Algum campo do filtro da consulta deve ser preenchido, além do Tipo de Estabelecimento, Situação Cadastral, CNAE Principal e CNAE Secundário.');
			return false;
		}
	}

	if (valorFiltroSituacaoCadastral != "0") {
		if (valorFiltroIdentificacao == ""
			&& valorFiltroNomeEmpresarial == ""
			&& valorFiltroContabilista == ""
			&& valorFiltroParticipante == ""
			&& valorFiltroDelegacia == "0"
            && valorFiltroProcurador == "") {
			alert('Erro 9029: Algum campo do filtro da consulta deve ser preenchido, além do Tipo de Estabelecimento, Situação Cadastral, CNAE Principal e CNAE Secundário.');
			return false;
		}
	}

	if (valorFiltroIdentificacao == ""
		&& valorFiltroNomeEmpresarial == ""
		&& valorFiltroContabilista == ""
		&& valorFiltroParticipante == ""
		&& valorFiltroDelegacia == "0"
        && valorFiltroProcurador == "") {
		alert('Erro 9029: Algum campo do filtro da consulta deve ser preenchido, além do Tipo de Estabelecimento, Situação Cadastral, CNAE Principal e CNAE Secundário.');
		return false;
	}

	return true;
}

function ValidarEntradaConsultaCompletaEnderecoClient(source, arguments) {
	var valorFiltroCEP = ObterValorFiltroCEP();
	var valorFiltroNumeroLogradouro = Trim(ObterValorFiltroNumeroLogradouro());
	var valorFiltroNomeLogradouro = ObterValorFiltroNomeLogradouro();
	var valorFiltroMunicipio = ObterValorFiltroMunicipio();
	var valorFiltroTipoEstabelecimentoEndereco = ObterValorFiltroTipoEstabelecimentoEndereco();
	var valorFiltroSituacaoCadastralEndereco = ObterValorFiltroSituacaoCadastralEndereco();

	if (valorFiltroCEP != "") {
		return VerificaCEP(valorFiltroCEP);
	}

	if (valorFiltroNumeroLogradouro != "") {
		if (valorFiltroCEP == "" && valorFiltroNomeLogradouro == "") {
			alert('Erro 9031: Preenchimento de Número de Logradouro deve ser acompanhado de Nome do Logradouro ou CEP.');
			return false;
		}
	}

	if (valorFiltroNomeLogradouro != "") {
		var temp = Trim(valorFiltroNomeLogradouro);
		var compNomeLogradouro = temp.length;

		if (compNomeLogradouro < 3) {
			alert('Erro 9020: O Nome do Logradouro deve conter pelo menos 3 caracteres.');
			return false;
		}

		if (valorFiltroMunicipio == "0" && valorFiltroCEP == "" && valorFiltroNumeroLogradouro == "") {
			alert('Erro 9032: Preenchimento de Nome do Logradouro deve ser acompanhado de Município, CEP ou Número do Logradouro.');
			return false;
		}
	}

	if (valorFiltroMunicipio != "0") {
		if (valorFiltroTipoEstabelecimentoEndereco != "2") {
			if (valorFiltroNomeLogradouro == "" && valorFiltroCEP == "") {
				alert('Erro 9033: Preenchimento de Município deve ser acompanhado do Nome do Logradouro ou de CEP que não seja único no município (condição não aplicada apenas para consulta de Produtor Rural).');
				return false;
			}
		}
	}

	if (valorFiltroSituacaoCadastralEndereco != "0") {
		if (valorFiltroCEP == "" && valorFiltroNumeroLogradouro == "" && valorFiltroNomeLogradouro == "" && valorFiltroMunicipio == "0") {
			alert('Erro 9035: Algum campo do filtro da consulta deve ser preenchido, além do Tipo de Estabelecimento e Situação Cadastral.');
			return false;
		}
	}

	if (valorFiltroCEP == "" && valorFiltroNumeroLogradouro == "" && valorFiltroNomeLogradouro == "" && valorFiltroMunicipio == "0") {
		alert('Erro 9035: Algum campo do filtro da consulta deve ser preenchido, além do Tipo de Estabelecimento e Situação Cadastral.');
		return false;
	}

	return true;
}

// ============================================================================
// Controle de acesso
// ============================================================================
function ValidarFiltroControleAcesso(source, arguments) {
	var opcaoPerfil = ObterPerfilRadioButtom();
	var opcaoFuncionalidade = ObterFuncionalidadeRadioButtom();
	var opcaoUsuario = ObterUsuarioRadioButton();
	var valorPerfil = ObterPerfilDropDownList();
	var valorFuncionalidade = ObterFuncionalidadeDropDownList();
	var valorUsuario = ObterIdUsuarioTextBox();


	//	if (opcaoPerfil) {
	//		if (valorPerfil < 0) {
	//			alert('Perfil de Acesso não selecionado.');
	//			return false;		
	//		}
	//	}

	//	if (opcaoFuncionalidade) {
	//		if (valorFuncionalidade < 0) {
	//			alert('Funcionalidade não selecionada.');
	//			return false;		
	//		}
	//	}

	if (opcaoUsuario) {
		if (valorUsuario == "") {
			alert("Campo 'Id do Usuário Sefaz' deve ser preenchido.");
			return false;
		}
	}

	return true;
}

function ValidarLoginUsuario(source, arguments) {
	var valorUsuario = ObterNmLoginUsuarioTextBox();

	if (valorUsuario == "") {
		alert("Campo 'Id do Usuário Fazendário' deve ser preenchido.");
		return false;
	}

	return true;
}

function ValidarPerfilDeAcesso(source, arguments) {
	var nmPerfil = ObterNmPerfilTextBox();
	var dsPerfil = ObterDsPerfilTextBox();
	var tipoPerfil = ObterTipoPerfilDropDownList();

	if (nmPerfil == "") {
		alert("Todos os campos devem ser preenchidos.");
		return false;
	}

	if (dsPerfil == "") {
		alert("Todos os campos devem ser preenchidos.");
		return false;
	}

	if (tipoPerfil == "-1") {
		alert("Todos os campos devem ser preenchidos.");
		return false;
	}

	return true;
}

function ValidarHomologador(source, arguments) {
	var cdDrtErgon = ObterDelegaciaIncluirDropDownList();
	var idPostoFiscal = ObterPostoFiscalIncluirDropDownList();
	var cdFuncao = ObterFuncaoSistemaIncluirDropDownList();
	var nmLoginHomologador = ObterNmLoginUsuarioTextBox();

	if (nmLoginHomologador == "") {
		alert("Campo 'login' deve ser preenchido.");
		return false;
	}

	if (cdFuncao == "-1") {
		alert("Campo 'Função no Sistema' deve ser preenchido.");
		return false;
	}

	if (cdDrtErgon == "-1") {
		alert("Campo 'Delegacia' deve ser preenchido.");
		return false;
	}

	//    if ((cdFuncao == "FISHOMOLOG" || cdFuncao == "TAAT") && idPostoFiscal == "-1") {
	//        alert("Campo 'Posto Fiscal' deve ser preenchido.");
	//        return false;
	//    }
	return true;
}


// ============================================================================
// Funções Especiais de Navegação
// ============================================================================

// Permite a inserção de um dado em um certo ponto da textbox
function insertDataAtPos(obj, text) {
	if (document.selection) {
		obj.focus();
		var orig = obj.value.replace(/\r\n/g, "\n");
		var range = document.selection.createRange();

		if (range.parentElement() != obj) {
			return false;
		}

		range.text = text;

		var actual = tmp = obj.value.replace(/\r\n/g, "\n");

		for (var diff = 0; diff < orig.length; diff++) {
			if (orig.charAt(diff) != actual.charAt(diff)) break;
		}

		for (var index = 0, start = 0;
				tmp.match(text)
					&& (tmp = tmp.replace(text, ""))
					&& index <= diff;
				index = start + text.length
			) {
			start = actual.indexOf(text, index);
		}
	} else if (obj.selectionStart) {
		var start = obj.selectionStart;
		var end = obj.selectionEnd;

		obj.value = obj.value.substr(0, start)
				+ text
				+ obj.value.substr(end, obj.value.length);
	}

	if (start != null) {
		setCaretTo(obj, start + text.length);
	} else {
		obj.value += text;
	}
}

function setCaretTo(obj, pos) {
	if (obj.createTextRange) {
		var range = obj.createTextRange();
		range.move('character', pos);
		range.select();
	} else if (obj.selectionStart) {
		obj.focus();
		obj.setSelectionRange(pos, pos);
	}
}

function EhIEValido(numeroIE) {
    var ie = numeroIE;
    var i;
    for (i = 0; i < ie.length; i++) {
        if (ie.substr(i, 1) == ' ' || ie.substr(i, 1) == '.' || ie.substr(i, 1) == '-' || ie.substr(i, 1) == '/')
            ie = ie.replace(ie.substr(i, 1), "");
    }

    if (ie != "") {
        var expReg = /^(\d{12})|((\d{3}.){3}\d{3})$/;

        if (ie.length != 9) {
            if (isNaN(ie) == true) {
                return false;
            }
            if (!expReg.exec(ie)) {
                return false;
            }
            if (Number(ie) == 0) {
                return false;
            }
        }

        soma = 0;
        pesos1 = new Array(1, 3, 4, 5, 6, 7, 8, 10);
        pesos2 = new Array(3, 2, 10, 9, 8, 7, 6, 5, 4, 3, 2);
        for (i = 0; i < pesos1.length; i++) {
            digito = parseInt(ie.substring(i, i + 1), 10);
            soma += digito * pesos1[i];
        }
        digVerif = (soma % 11) % 10;
        digito = parseInt(ie.substring(8, 9), 10);
        if (digVerif != digito) {
            return false;
        }

        //soma = 0;
        //for (i = 0; i < pesos2.length; i++) {
        //	digito = parseInt(ie.substring(i, i + 1), 10);
        //	soma += digito * pesos2[i];
        //}
        //digVerif = (soma % 11) % 10;
        //digito = parseInt(ie.substring(11, 12), 10);

        //if (digVerif != digito) {
        //	alert('Erro 9021: Número da IE do estabelecimento inválido.');
        //	return false;
        //}
        return true;
    }
    else {
        return false;
    }
}

function EhCNPJBaseValido(numeroCNPJBase) {
    var temp = numeroCNPJBase;
    temp = Substitui(temp, '.', '');
    temp = Substitui(temp, '.', '');
    temp = Substitui(temp, ' ', '');
    var CNPJBase = temp;
    if (CNPJBase != "") {
        var expReg = /^(\d{8})|(\d{2}.\d{3}.\d{3})$/;

        if (isNaN(CNPJBase) == true) {
            return false;
        }
        if (!expReg.exec(CNPJBase)) {
            return false;
        }
        if (Number(CNPJBase) == 0) {
            return false;
        }
        return true;
    }
    else {
        return false;
    }
}

function EhCNPJValido(numeroCNPJ) {
    var temp = numeroCNPJ;
    var i;
    for (i = 0; i < numeroCNPJ.length; i++) {
        if (isNaN(numeroCNPJ.charAt(i)) || numeroCNPJ.charAt(i) == ' ') {
            temp = Substitui(temp, numeroCNPJ.charAt(i), '');
        }
    }
    //	temp = Substitui(temp, '.', '');
    //	temp = Substitui(temp, '.', '');
    //	temp = Substitui(temp, '/', '');
    //	temp = Substitui(temp, '-', '');
    //	temp = Substitui(temp, ' ', '');
    var CNPJ = temp;
    if (CNPJ != "") {
        var comp = CNPJ.length;

        if (isNaN(CNPJ) == true) {
            return false;
        }

        if (comp == 14) {
            if (Number(CNPJ) == 0) {
                return false;
            }

            RetCritDv = DigitoCPFCNPJ(CNPJ);
            if (RetCritDv == "1") {
                return false;
            }
        }
        else {
            return false;
        }
        return true;
    }
    else {
        return false;
    }
}

function EhCPFValido(numeroCPF) {
    var temp = numeroCPF;
    var i;
    for (i = 0; i < numeroCPF.length; i++) {
        if (isNaN(numeroCPF.charAt(i)) || numeroCPF.charAt(i) == ' ') {
            temp = Substitui(temp, numeroCPF.charAt(i), '');
        }
    }
    //	temp = Substitui(temp, '.', '');
    //	temp = Substitui(temp, '.', '');
    //	temp = Substitui(temp, '-', '');
    //	temp = Substitui(temp, ' ', '');
    var CPF = temp;
    var codigoErro = null;
    if (CPF != "") {
        var comp = CPF.length;

        if (isNaN(CPF) == true) {
            return false;
        }

        if (comp == 11) {
            if (Number(CPF) == 0) {
                return false;
            }

            RetCritDv = DigitoCPF(CPF);
            if (RetCritDv == "1") {
                return false;
            }
        }
        else {
            return false;
        }
        return true;
    }
    else {
        return false;
    }
}
